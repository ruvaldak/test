plugins {
    id("architectury-plugin") version("3.0-SNAPSHOT")
    id("forgified-fabric-loom") version("0.6-SNAPSHOT") apply false
    id("org.cadixdev.licenser") version("0.5.0")
    id("com.matthewprenger.cursegradle") version("1.4.0")
    id("java")
    id("maven-publish")
}

import java.text.SimpleDateFormat

archivesBaseName = "RoughlyEnoughItems"

def runNumber = System.getenv("GITHUB_RUN_NUMBER") ?: "9999"
version = rootProject.base_version + "." + runNumber + "-alpha"

group = "me.shedaniel"

subprojects {
    apply plugin: "com.matthewprenger.cursegradle"
    apply plugin: "forgified-fabric-loom"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft("com.mojang:minecraft:${rootProject.minecraft_version}")
        mappings(loom.officialMojangMappings())
    }
}

allprojects {
    apply plugin: "maven-publish"
    apply plugin: "architectury-plugin"
    apply plugin: "org.cadixdev.licenser"

    sourceCompatibility = targetCompatibility = 1.8

    repositories {
        maven { url "https://maven.shedaniel.me" }
        maven { url "https://maven.terraformersmc.com/releases" }
    }

    license {
        header rootProject.file("HEADER")
        include "**/*.java"
        exclude "mezz/jei/api/**/*.java"
    }

    jar {
        from rootProject.file("LICENSE")
    }

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"

        def targetVersion = 8
        if (JavaVersion.current().isJava9Compatible()) {
            options.release = targetVersion
        }
    }
}

subprojects {
//    apply plugin: "forgified-fabric-loom"

    group = rootProject.group
    version = rootProject.version
    archivesBaseName = rootProject.name

//    loom {
//        silentMojangMappingsLicense()
//    }

    dependencies {
//        minecraft("com.mojang:minecraft:${project.minecraft_version}")
//        mappings(loom.officialMojangMappings())
//        modApi("net.fabricmc:fabric-loader:${project.fabricloader_version}")
    }

    /*publishing {
        publications {
            create("${archivesBaseName}_mavenJava", MavenPublication) {
                afterEvaluate {
                    artifact(jar) {
                        builtBy mavenJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }

        repositories {
            if (System.getenv("MAVEN_PASS") != null) {
                maven {
                    url = "https://deploy.shedaniel.me/"
                    credentials {
                        username = "shedaniel"
                        password = System.getenv("MAVEN_PASS")
                    }
                }
            }
        }
    }*/
}

task licenseFormatAll
subprojects { licenseFormatAll.dependsOn("${path}:licenseFormat") }
//subprojects { rootProject.remapJar.dependsOn("${path}:remapJar") }

//dependencies {
//    subprojects.each {
//        compile project(path: ":${it.name}", configuration: "dev")
//        include project(path: ":${it.name}", configuration: "remapped")
//    }
//}

ext {
    releaseChangelog = "No changelog"
}

/* Thank you modmenu & fablabs */
task releaseOnCf {
    def df = new SimpleDateFormat("yyyy-MM-dd HH:mm")
    df.setTimeZone(TimeZone.getTimeZone("UTC"))
    def branch
    if (System.env.BRANCH_NAME) {
        branch = System.env.BRANCH_NAME
        branch = branch.substring(branch.lastIndexOf("/") + 1)
    } else {
        branch = "git rev-parse --abbrev-ref HEAD".execute().in.text.trim()
    }
    if (branch == "HEAD") {
        branch = "git rev-parse --short HEAD".execute().in.text.trim()
    }
    def time = df.format(new Date())
    def changes = new StringBuilder()
    changes << "<h2>REI v$project.version for $project.supported_version</h2>Updated at <b>$time</b>.<br><a href=\"https://www.github.com/shedaniel/RoughlyEnoughItems/commits/$branch\">Click here for changelog</a>"
    def proc = "git log --max-count=200 --pretty=format:%s".execute()
    proc.in.eachLine { line ->
        def processedLine = line.toString()
        if (!processedLine.contains("New translations") && !processedLine.contains("Merge") && !processedLine.contains("branch")) {
            changes << "<br>- ${processedLine.capitalize()}"
        }
    }
    proc.waitFor()
    releaseChangelog = changes.toString()
    dependsOn project("forge").tasks.getByName("curseforge")
}

/*project {                                                                                                      
    id = "310111"                                                                                                
    releaseType = "release"                                                                                      
    changelogType = "html"                                                                                       
    changelog = releaseChangelog                                                                                 
    addGameVersion "1.16-Snapshot"                                                                               
    addGameVersion "1.16.2"                                                                                      
    addGameVersion "1.16.3"                                                                                      
    addGameVersion "1.16.4"                                                                                      
    addGameVersion "Java 8"                                                                                      
    addGameVersion "Fabric"                                                                                      
    relations {                                                                                                  
        requiredDependency "fabric-api"                                                                          
        requiredDependency "cloth-config"                                                                        
        embeddedLibrary "cloth-api"                                                                              
    }                                                                                                            
    mainArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}.jar")) {          
        displayName = "[Fabric $project.supported_version] v$project.version"                                    
    }                                                                                                            
    addArtifact(file("${project.buildDir}/libs/${project.archivesBaseName}-${project.version}-sources.jar")) {   
        displayName = "[Fabric $project.supported_version] v$project.version Sources"                            
    }                                                                                                            
    afterEvaluate {                                                                                              
        uploadTask.dependsOn("build")                                                                            
    }                                                                                                            
}*/

/*publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(jar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }

    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                url = "https://deploy.shedaniel.me/"
                credentials {
                    username = "shedaniel"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}*/

allprojects {
    architectury {
        transformerVersion = "2.1.38"
    }
}
